import maya.cmds as mc
import pymel.core as pm
from functools import wraps

import adb_core.NameConv_utils as NC


# -----------------------------------
#  DECORATORS
# -----------------------------------

def undo(func):
    """ Puts the wrapped `func` into a single Maya Undo action, then
        undoes it when the function enters the finally: block
        from schworer Github """
    @wraps(func)
    def _undofunc(*args, **kwargs):
        try:
            # start an undo chunk
            mc.undoInfo(ock=True)
            return func(*args, **kwargs)
        finally:
            # after calling the func, end the undo chunk
            mc.undoInfo(cck=True)
    return _undofunc


# ----------------------------------------------------------------------

def changeColor(col=(0.8, 0.5, 0.2)):
    """ Puts the wrapped `func` into a Nurbs.
        Sets the override color to a RGB value

        :param: col : RGB values,
        :type col: tuple
    """
    def real_decorator(func):
        def _changeColorfunc(*args, **kwargs):
            f = func(*args, **kwargs)
            pm.select(f)

            ctrls = pm.selected()

            shapes = [x.getShapes() for x in ctrls]
            all_shapes = [x for i in shapes for x in i]

            for ctrl in all_shapes:
                pm.PyNode(ctrl).overrideEnabled.set(1)
                pm.PyNode(ctrl).overrideRGBColors.set(1)
                pm.PyNode(ctrl).overrideColorRGB.set(col)

            return f
        return _changeColorfunc
    return real_decorator


# -----------------------------------
#  FUNCTIONS
# -----------------------------------


"""
=========================== shape building ===========================

"""


@undo
def Xarrow_shape():
    _ctrl = pm.curve(p=[(-1.0, 0.0, 0.0), (-1.0, 0.0, 2.0), (1.0, 0.0, 2.0), (1.0, 0.0, 0.0), (2.0, 0.0, 0.0), (0.0, 0.0, -2.0), (-2.0, 0.0, 0.0), (-1.0, 0.0, 0.0)],
                     d=1,
                     k=[0, 1, 2, 3, 4, 5, 6, 7],
                     )
    return _ctrl


@undo
def Yarrow_shape():
    _ctrl = pm.curve(p=[([-2.22044604925e-16, -1.0, 0.0]), ([-2.22044604925e-16, -1.0, 2.0]), ([2.22044604925e-16, 1.0, 2.0]), ([2.22044604925e-16, 1.0, 0.0]), ([4.4408920985e-16, 2.0, 0.0]), ([0.0, 0.0, -2.0]), ([-4.4408920985e-16, -2.0, 0.0]), ([-2.22044604925e-16, -1.0, 0.0])],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0],
                     d=1,
                     )
    return _ctrl


@undo
def Zarrow_shape():
    _ctrl = pm.curve(p=[([-2.22044604925e-16, 0.0, -1.0]), ([-2.0, 0.0, -1.0]), ([-2.0, 0.0, 1.0]), ([2.22044604925e-16, 0.0, 1.0]), ([4.4408920985e-16, 0.0, 2.0]), ([2.0, 0.0, -4.4408920985e-16]),
                     ([-4.4408920985e-16, 0.0, -2.0]), ([-2.22044604925e-16, 0.0, -1.0])],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0],
                     d=1,
                     )
    return _ctrl


@undo
def main_shape():
    _ctrl = pm.curve(p=[[0.0002, 0.0001, -3.6651], [0.8119, 0.0001, -2.8585], [0.4098, 0.0001, -2.8584], [0.4097, 0.0001, -2.3697], [0.7795, 0.0001, -2.2692], [1.1494, 0.0001, -2.1118], [1.4598, 0.0001, -1.9041],
                        [1.6761, 0.0001, -1.7039], [1.9041, 0.0001, -1.4598], [2.1118, 0.0001, -1.1494], [2.2692, 0.0001, -0.7795], [2.3697, 0.0001, -0.4097], [2.8584, 0.0001, - 0.4098], [2.8585, 0.0001, -0.8119],
                        [3.6651, 0.0001, -0.0002], [2.8585, 0.0001, 0.8119], [2.8584, 0.0001, 0.4098], [2.3697, 0.0001, 0.4097], [2.2692, 0.0001, 0.7795], [2.1118, 0.0001, 1.1494], [1.9041, 0.0001, 1.4598], [1.7039, 0.0001, 1.6761],
                        [1.4598, 0.0001, 1.9041], [1.1494, 0.0001, 2.1118], [0.7795, 0.0001, 2.2692], [0.4097, 0.0001, 2.3697], [0.4098, 0.0001, 2.8584], [0.8119, 0.0001, 2.8585], [-0.0002, 0.0001, 3.6651], [-0.8119, 0.0001, 2.8585],
                        [-0.4098, 0.0001, 2.8584], [-0.4097, 0.0001, 2.3697], [-0.7795, 0.0001, 2.2692], [-1.1494, 0.0001, 2.1118], [-1.4598, 0.0001, 1.9041], [-1.6761, 0.0001, 1.7039], [-1.9041, 0.0001, 1.4598], [-2.1118, 0.0001, 1.1494],
                        [-2.2692, 0.0001, 0.7795], [-2.3697, 0.0001, 0.4097], [-2.8584, 0.0001, 0.4098], [-2.8585, 0.0001, 0.8119], [-3.6651, 0.0001, 0.0002], [-2.8585, 0.0001, -0.8119], [-2.8584, 0.0001, -0.4098], [-2.3697, 0.0001, -0.4097],
                        [-2.2692, 0.0001, -0.7795], [-2.1118, 0.0001, -1.1494], [-1.9041, 0.0001, -1.4598], [-1.7039, 0.0001, -1.6761], [-1.4598, 0.0001, -1.9041], [-1.1494, 0.0001, -2.1118], [-0.7795, 0.0001, -2.2692], [-0.4097, 0.0001, -2.3697],
                        [-0.4098, 0.0001, -2.8584], [-0.8119, 0.0001, -2.8585], [-0.0002, 0.0001, -3.6651]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0,
                        29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0],
                     d=1,
                     n="main_ctrl",
                     )
    return _ctrl


@undo
def cube_shape():
    _ctrl = pm.curve(p=[(-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, 0.5), (-0.5, -0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, 0.5, -0.5)],
                     d=1,
                     n="cube_ctrl",
                     )
    return _ctrl


@undo
def rectangle_shape():
    _ctrl = pm.curve(p=[[-1.0348, 0.0868, 1.0348], [1.0348, 0.0868, 1.0348], [1.0348, 0.0868, -1.0348], [-1.0348, 0.0868, -1.0348], [-1.0348, 0.0868, 1.0348], [-1.0348, -0.0868, 1.0348], [-1.0348, -0.0868, -1.0348], [1.0348, -0.0868, -1.0348], [1.0348, -0.0868, 1.0348], [-1.0348, -0.0868, 1.0348], [1.0348, -0.0868, 1.0348], [1.0348, 0.0868, 1.0348], [1.0348, 0.0868, -1.0348], [1.0348, -0.0868, -1.0348], [-1.0348, -0.0868, -1.0348], [-1.0348, 0.0868, -1.0348]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0],
                     d=1, n="rectangle_ctrl")
    return _ctrl


@undo
def circleY_shape():
    _ctrl = pm.circle(n="circle_ctrl", c=(0, 0, 0), ch=1, d=3, ut=0, sw=360, s=8, r=1, tol=0.01, nr=(0, 1, 0))
    return _ctrl[0]


@undo
def circleX_shape():
    _ctrl = pm.circle(n="circle_ctrl", c=(0, 0, 0), ch=1, d=3, ut=0, sw=360, s=8, r=1, tol=0.01, nr=(1, 0, 0))
    return _ctrl[0]


@undo
def circleZ_shape():
    _ctrl = pm.circle(n="circle_ctrl", c=(0, 0, 0), ch=1, d=3, ut=0, sw=360, s=8, r=1, tol=0.01, nr=(0, 0, 1))
    return _ctrl[0]


@undo
def ball_shape():
    _ctrl = pm.curve(p=[[-0.4769, 0.0000, 0.0000], [-0.4536, 0.0000, -0.1474], [-0.3858, 0.0000, -0.2803], [-0.2803, 0.0000, -0.3858], [-0.1474, 0.0000, -0.4536], [0.0000, 0.0000, -0.4769], [0.0000, 0.2384, -0.4130], [0.0000, 0.4130, -0.2384], [0.0000, 0.4769, 0.0000], [0.0000, 0.4130, 0.2384], [0.0000, 0.2384, 0.4130], [0.0000, 0.0000, 0.4769], [-0.0000, -0.2384, 0.4130], [-0.0000, -0.4130, 0.2384], [-0.0000, -0.4769, 0.0000], [-0.0000, -0.4130, -0.2384], [-0.0000, -0.2384, -0.4130], [0.0000, 0.0000, -0.4769], [0.1474, -0.0000, -0.4536], [0.2803, -0.0000, -0.3858], [0.3858, -0.0000, -0.2803], [0.4536, -0.0000, -0.1474], [0.4769, -0.0000, 0.0000],
                        [0.4536, -0.0000, 0.1474], [0.3858, -0.0000, 0.2803], [0.2803, -0.0000, 0.3858], [0.1474, -0.0000, 0.4536], [0.0000, 0.0000, 0.4769], [-0.1474, 0.0000, 0.4536], [-0.2803, 0.0000, 0.3858], [-0.3858, 0.0000, 0.2803], [-0.4536, 0.0000, 0.1474], [-0.4769, 0.0000, 0.0000], [-0.4536, 0.1474, 0.0000], [-0.3858, 0.2803,
                                                                                                                                                                                                                                                                                                                                 0.0000], [-0.2803, 0.3858, 0.0000], [-0.1474, 0.4536, 0.0000], [0.0000, 0.4769, 0.0000], [0.1474, 0.4536, 0.0000], [0.2803, 0.3858, 0.0000], [0.3858, 0.2803, 0.0000], [0.4536, 0.1474, 0.0000], [0.4769, -0.0000, 0.0000], [0.4536, -0.1474, 0.0000], [0.3858, -0.2803, 0.0000], [0.2803, -0.3858, 0.0000], [0.1474, -0.4536, 0.0000],
                        [-0.0000, -0.4769, 0.0000], [-0.1474, -0.4536, 0.0000], [-0.2803, -0.3858, 0.0000], [-0.3858, -0.2803, 0.0000], [-0.4536, -0.1474, 0.0000], [-0.4769, 0.0000, 0.0000]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0,
                         27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0],
                     d=1,
                     n="ball_ctrl",
                     )
    return _ctrl


@undo
def diamond_shape():
    _ctrl = pm.curve(p=[[-0.0018, 0.5000, 0.0000], [-0.0018, 0.0000, 0.5000], [-0.0018, -0.5000, 0.0000], [-0.0018, 0.0000, -0.5000], [-0.0018, 0.5000, 0.0000], [-0.5018, 0.0000, 0.0000], [-0.0018, -0.5000, 0.0000], [0.4982, 0.0000, 0.0000], [-0.0018, 0.5000, 0.0000], [-0.5018, 0.0000, 0.0000], [-0.0018, 0.0000, 0.5000], [0.4982, 0.0000, 0.0000], [-0.0018, 0.0000, -0.5000], [-0.5018, 0.0000, 0.0000]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0],
                     d=1,
                     n="diamond_ctrl",
                     )
    pm.xform(_ctrl, cp=1)
    return _ctrl


@undo
def fleches_shape():
    _ctrl = pm.curve(p=[(0, 0.35, -1.001567), (-0.336638, 0.677886, -0.751175), (-0.0959835, 0.677886, -0.751175), (-0.0959835, 0.850458, -0.500783), (-0.0959835, 0.954001, -0.0987656), (-0.500783, 0.850458, -0.0987656), (-0.751175, 0.677886, -0.0987656), (-0.751175, 0.677886, -0.336638), (-1.001567, 0.35, 0), (-0.751175, 0.677886, 0.336638), (-0.751175, 0.677886, 0.0987656), (-0.500783, 0.850458, 0.0987656), (-0.0959835, 0.954001, 0.0987656), (-0.0959835, 0.850458, 0.500783), (-0.0959835, 0.677886, 0.751175), (-0.336638, 0.677886, 0.751175), (0, 0.35, 1.001567), (0.336638, 0.677886, 0.751175), (0.0959835, 0.677886, 0.751175),
                        (0.0959835, 0.850458, 0.500783), (0.0959835, 0.954001, 0.0987656), (0.500783, 0.850458, 0.0987656), (0.751175, 0.677886, 0.0987656), (0.751175, 0.677886, 0.336638), (1.001567, 0.35, 0), (0.751175, 0.677886, -0.336638), (0.751175, 0.677886, -0.0987656), (0.500783, 0.850458, -0.0987656), (0.0959835, 0.954001, -0.0987656), (0.0959835, 0.850458, -0.500783), (0.0959835, 0.677886, -0.751175), (0.336638, 0.677886, -0.751175), (0, 0.35, -1.001567)],
                     k=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],
                     d=1,
                     n="fleche_ctrl"
                     )
    return _ctrl


@undo
def double_fleches_shape():
    _ctrl = pm.curve(p=[([-0.303296141283, -1.86265e-09, -0.104411427523]), ([0.303296141283, -1.86265e-09, -0.104411427523]), ([0.303296141283, -1.86265e-09, -0.186984479761]), ([0.515063506639, -1.86265e-09, 0.0]), ([0.303296141283, -1.86265e-09, 0.186984479761]), ([0.303296141283, -1.86265e-09, 0.104411427523]), ([-0.303296141283, -1.86265e-09, 0.104411427523]), ([-0.303296141283, -1.86265e-09, 0.186984479761]), ([-0.515063506639, -1.86265e-09, 0.0]), ([-0.303296141283, -1.86265e-09, -0.186984479761]), ([-0.303296141283, -1.86265e-09, -0.104411427523])],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0],
                     d=1,
                     n="double_fleches_ctrl"
                     )
    return _ctrl


@undo
def arc_fleches_shape():
    _ctrl = pm.curve(p=[(0.0, 0.429608, 0.162468), (-0.124394, 0.418966, 0.162468), (-0.245173, 0.38735, 0.162468), (-0.358826, 0.335679, 0.162468), (-0.462052, 0.265453, 0.162468), (-0.462052, 0.265453, 0.310459), (-0.522393, 0.210526, 0.235235), (-0.582618, 0.140987, 0.150413), (-0.633651, 0.0644459, 0.0655923), (-0.666295, 0.00121835, 0.0), (-0.635276, 0.0616262, -0.0625932), (-0.584148, 0.13897, -0.148081), (-0.523658, 0.209235, -0.233569), (-0.462052, 0.265453, -0.310459), (-0.462052, 0.265453, -0.162468), (-0.358826, 0.335679, -0.162468), (-0.245173, 0.38735, -0.162468), (-0.124394, 0.418966, -0.162468), (0.0, 0.429608, -0.162468), (0.124394, 0.418966, -0.162468), (0.245173, 0.38735, -0.162468), (0.358826, 0.335679, -0.162468), (0.462052, 0.265453, -0.162468), (0.462052, 0.265453, -0.310459), (0.523658, 0.209235, -0.233569), (0.584148, 0.13897, -0.148081), (0.635276, 0.0616262, -0.0625932), (0.666295, 0.00121835, 0.0), (0.633651, 0.0644459, 0.0655923), (0.582618, 0.140987, 0.150413), (0.522393, 0.210526, 0.235235), (0.462052, 0.265453, 0.310459), (0.462052, 0.265453, 0.162468), (0.358826, 0.335679, 0.162468), (0.245173, 0.38735, 0.162468), (0.124394, 0.418966, 0.162468), (0.0, 0.429608, 0.162468)],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0,
                         19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0],
                     d=1, n="arc_fleches_ctrl",
                     )
    return _ctrl


@undo
def halfSpherePin_shape():
    _ctrl = pm.curve(p=[[0.0000, 3.0847, -0.3643], [-0.0476, 3.0847, -0.3612], [-0.0943, 3.0847, -0.3519], [-0.1394, 3.0847, -0.3366], [-0.1822, 3.0847, -0.3155], [-0.2218, 3.0847, -0.2890], [-0.2576, 3.0847, -0.2576], [-0.2890, 3.0847, -0.2218], [-0.3155, 3.0847, -0.1822], [-0.3366, 3.0847, -0.1394], [-0.3519, 3.0847, -0.0943], [-0.3612, 3.0847, -0.0476], [-0.3643, 3.0847, 0.0000], [-0.3612, 3.0847, 0.0476], [-0.3519, 3.0847, 0.0943], [-0.3366, 3.0847, 0.1394], [-0.3155, 3.0847, 0.1822], [-0.2890, 3.0847, 0.2218], [-0.2576, 3.0847, 0.2576], [-0.2218, 3.0847, 0.2890], [-0.1822, 3.0847, 0.3155], [-0.1394, 3.0847, 0.3366], [-0.0943, 3.0847, 0.3519], [-0.0476, 3.0847, 0.3612], [0.0000, 3.0847, 0.3643], [0.0476, 3.0847, 0.3612], [0.0943, 3.0847, 0.3519], [0.1394, 3.0847, 0.3366], [0.1822, 3.0847, 0.3155], [0.2218, 3.0847, 0.2890], [0.2576, 3.0847, 0.2576], [0.2890, 3.0847, 0.2218], [0.3155, 3.0847, 0.1822], [0.3366, 3.0847, 0.1394], [0.3519, 3.0847, 0.0943],
                        [0.3612, 3.0847, 0.0476], [0.3643, 3.0847, 0.0000], [0.3612, 3.0847, -0.0476], [0.3519, 3.0847, -0.0943], [0.3366, 3.0847, -0.1394], [0.3155, 3.0847, -0.1822], [0.2890, 3.0847, -0.2218], [0.2576, 3.0847, -0.2576], [0.2218, 3.0847, -0.2890], [0.1822, 3.0847, -0.3155], [0.1394, 3.0847, -
                                                                                                                                                                                                                                                                                                     0.3366], [0.0943, 3.0847, -0.3519], [0.0476, 3.0847, -0.3612], [0.0000, 3.0847, -0.3643], [0.0000, 3.0847, -0.3909], [0.0510, 3.0847, -0.3876], [0.1012, 3.0847, -0.3776], [0.1496, 3.0847, -0.3612], [0.1955, 3.0847, -0.3385], [0.2380, 3.0847, -0.3101], [0.2764, 3.0847, -0.2764],
                        [0.3101, 3.0847, -0.2380], [0.3385, 3.0847, -0.1955], [0.3612, 3.0847, -0.1496], [0.3776, 3.0847, -0.1012], [0.3876, 3.0847, -0.0510], [0.3909, 3.0847, 0.0000], [0.3876, 3.0847, 0.0510], [0.3776, 3.0847, 0.1012], [0.3612, 3.0847, 0.1496], [0.3385, 3.0847, 0.1955], [0.3101, 3.0847, 0.2380], [0.2764, 3.0847, 0.2764], [0.2380, 3.0847, 0.3101], [0.1955, 3.0847, 0.3385], [0.1496, 3.0847, 0.3612], [0.1012, 3.0847, 0.3776], [0.0510, 3.0847, 0.3876], [0.0000, 3.0847, 0.3909], [-0.0510, 3.0847, 0.3876], [-0.1012, 3.0847, 0.3776], [-0.1496, 3.0847, 0.3612], [-0.1955, 3.0847, 0.3385], [-0.2380, 3.0847, 0.3101], [-0.2764, 3.0847, 0.2764], [-0.3101, 3.0847, 0.2380], [-0.3385, 3.0847, 0.1955], [-0.3612, 3.0847, 0.1496], [-0.3776, 3.0847, 0.1012], [-0.3876, 3.0847, 0.0510], [-0.3909, 3.0847, 0.0000], [-0.3876, 3.0847, -0.0510], [-0.3776, 3.0847, -0.1012], [-0.3612, 3.0847, -0.1496], [-0.3385, 3.0847, -0.1955], [-0.3101, 3.0847, -0.2380], [-0.2764, 3.0847, -0.2764], [-0.2380, 3.0847, -0.3101], [-0.1955, 3.0847, -0.3385], [-0.1496, 3.0847, -0.3612], [-0.1012, 3.0847, -0.3776], [-0.0510, 3.0847, -0.3876], [0.0000, 3.0847, -0.3909], [0.0000, 3.0847, -0.4384], [0.0000, 3.0847, 0.0000], [0.0000, 3.0847, 0.4384], [0.0000, 3.0847, 0.0000], [0.4384, 3.0847, 0.0000], [0.0000, 3.0847, 0.0000], [-0.4384, 3.0847, 0.0000], [0.0000, 3.0847, 0.0000], [0.0000, 0.0000, 0.0000]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0,
                        55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0],
                     d=1,
                     n="HalfSpherePin__ctrl__",
                     )
    return _ctrl


@undo
def pin_shape():
    _ctrl = pm.curve(p=[[0.0000, 2.8507, -0.0000], [0.0000, 2.9882, -0.3320], [0.0000, 3.3202, -0.4695], [0.0000, 3.6522, -0.3320], [0.0000, 3.7897, -0.0000], [0.0000, 3.6522, 0.3320], [0.0000, 3.3202, 0.4695], [0.0000, 2.9882, 0.3320], [0.0000, 2.8507, -0.0000], [-0.1797, 2.8865, -0.0000], [-0.3320, 2.9882, -0.0000], [-0.4337, 3.1405, -0.0000], [-0.4695, 3.3202, -0.0000], [-0.4337, 3.4999, -0.0000], [-0.3320, 3.6522, -0.0000], [-0.1797, 3.7539, -0.0000], [0.0000, 3.7897, -0.0000], [0.1797, 3.7539, -0.0000], [0.3320, 3.6522, -0.0000], [0.4337, 3.4999, -0.0000], [0.4695, 3.3202, -0.0000], [0.4337, 3.1405, -0.0000], [0.3320, 2.9882, -0.0000], [0.1797, 2.8865, -0.0000], [0.0000, 2.8507, -0.0000], [0.0000, 0.0000, 0.0000]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0],
                     d=1,
                     n="Pin__ctrl__")
    return _ctrl


def double_pin_shape():
    _ctrl = pm.curve(p=[[0.0000, 0.0000, -1.9619], [-0.3320, 0.0000, -2.0994], [-0.4695, 0.0000, -2.4314], [-0.3320, 0.0000, -2.7634], [0.0000, 0.0000, -2.9009], [0.3320, 0.0000, -2.7634], [0.4695, 0.0000, -2.4314], [0.3320, 0.0000, -2.0994], [0.0000, 0.0000, -1.9619], [0.0000, 0.1797, -1.9977], [0.0000, 0.3320, -2.0994], [0.0000, 0.4337, -2.2517], [0.0000, 0.4695, -2.4314], [0.0000, 0.4337, -2.6111], [0.0000, 0.3320, -2.7634], [0.0000, 0.1797, -2.8651], [0.0000, 0.0000, -2.9009], [0.0000, -0.1797, -2.8651], [0.0000, -0.3320, -2.7634], [0.0000, -0.4337, -2.6111], [0.0000, -0.4695, -2.4314], [0.0000, -0.4337, -2.2517], [0.0000, -0.3320, -2.0994], [0.0000, -0.1797, -1.9977], [0.0000, 0.0000, -1.9619], [0.0000, 0.0000, 0.0000], [0.0000, 0.0000, 1.9615], [0.3320, 0.0000, 2.0990], [0.4695, 0.0000, 2.4310], [0.3320, 0.0000, 2.7630], [0.0000, 0.0000, 2.9005], [-0.3320, 0.0000, 2.7630], [-0.4695, 0.0000, 2.4310], [-0.3320, 0.0000, 2.0990], [0.0000, 0.0000, 1.9615], [0.0000, -0.1797, 1.9973], [0.0000, -0.3320, 2.0990], [0.0000, -0.4337, 2.2513], [0.0000, -0.4695, 2.4310], [0.0000, -0.4337, 2.6107], [0.0000, -0.3320, 2.7630], [0.0000, -0.1797, 2.8647], [0.0000, 0.0000, 2.9005], [0.0000, 0.1797, 2.8647], [0.0000, 0.3320, 2.7630], [0.0000, 0.4337, 2.6107], [0.0000, 0.4695, 2.4310], [0.0000, 0.4337, 2.2513], [0.0000, 0.3320, 2.0990], [0.0000, 0.1797, 1.9973], [0.0000, 0.0000, 1.9615]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0,
                         26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0],
                     d=1,
                     n="DoublePin__ctrl__",
                     )
    return _ctrl


@undo
def circleCross_shape():
    _ctrl = pm.curve(p=[[0.0000, 0.0000, -0.9320], [-0.1216, 0.0000, -0.9240], [-0.2412, 0.0000, -0.9002], [-0.3566, 0.0000, -0.8610], [-0.4660, 0.0000, -0.8071], [-0.5673, 0.0000, -0.7394], [-0.6590, 0.0000, -0.6590], [-0.7394, 0.0000, -0.5673], [-0.8071, 0.0000, -0.4660], [-0.8610, 0.0000, -0.3566], [-0.9002, 0.0000, -0.2412], [-0.9240, 0.0000, -0.1216], [-0.9320, 0.0000, 0.0000], [-0.9240, 0.0000, 0.1216], [-0.9002, 0.0000, 0.2412], [-0.8610, 0.0000, 0.3566], [-0.8071, 0.0000, 0.4660], [-0.7394, 0.0000, 0.5673], [-0.6590, 0.0000, 0.6590], [-0.5673, 0.0000, 0.7394], [-0.4660, 0.0000, 0.8071], [-0.3566, 0.0000, 0.8610], [-0.2412, 0.0000, 0.9002], [-0.1216, 0.0000, 0.9240], [0.0000, 0.0000, 0.9320], [0.1216, 0.0000, 0.9240], [0.2412, 0.0000, 0.9002], [0.3566, 0.0000, 0.8610], [0.4660, 0.0000, 0.8071], [0.5673, 0.0000, 0.7394], [0.6590, 0.0000, 0.6590], [0.7394, 0.0000, 0.5673], [0.8071, 0.0000, 0.4660], [0.8610, 0.0000, 0.3566], [0.9002, 0.0000, 0.2412], [0.9240, 0.0000, 0.1216], [0.9320, 0.0000, 0.0000], [0.9240, 0.0000, -0.1216], [0.9002, 0.0000, -0.2412], [0.8610, 0.0000, -0.3566], [0.8071, 0.0000, -0.4660], [0.7394, 0.0000, -0.5673], [0.6590, 0.0000, -0.6590], [0.5673, 0.0000, -0.7394], [0.4660, 0.0000, -0.8071], [0.3566, 0.0000, -0.8610], [0.2412, 0.0000, -0.9002], [0.1216, 0.0000, -0.9240], [0.0000, 0.0000, -0.9320], [0.0000, 0.0000, -1.0000], [0.1305, 0.0000, -0.9914], [0.2588, 0.0000, -0.9659],
                        [0.3827, 0.0000, -0.9239], [0.5000, 0.0000, -0.8660], [0.6088, 0.0000, -0.7934], [0.7071, 0.0000, -0.7071], [0.7934, 0.0000, -0.6088], [0.8660, 0.0000, -0.5000], [0.9239, 0.0000, -0.3827], [0.9659, 0.0000, -0.2588], [0.9914, 0.0000, -0.1305], [1.0000, 0.0000, 0.0000], [0.9914, 0.0000, 0.1305], [0.9659, 0.0000, 0.2588], [0.9239, 0.0000, 0.3827], [0.8660, 0.0000, 0.5000], [0.7934, 0.0000, 0.6088], [0.7071, 0.0000, 0.7071], [0.6088, 0.0000, 0.7934], [0.5000, 0.0000, 0.8660], [0.3827, 0.0000, 0.9239], [0.2588, 0.0000, 0.9659], [0.1305, 0.0000, 0.9914], [0.0000, 0.0000, 1.0000], [-0.1305, 0.0000, 0.9914], [-0.2588, 0.0000, 0.9659], [-0.3827, 0.0000, 0.9239], [-0.5000, 0.0000, 0.8660], [-0.6088, 0.0000, 0.7934], [-0.7071, 0.0000, 0.7071], [-0.7934, 0.0000, 0.6088], [-0.8660, 0.0000, 0.5000], [-0.9239, 0.0000, 0.3827], [-0.9659, 0.0000, 0.2588], [-0.9914, 0.0000, 0.1305], [-1.0000, 0.0000, 0.0000], [-0.9914, 0.0000, -0.1305], [-0.9659, 0.0000, -0.2588], [-0.9239, 0.0000, -0.3827], [-0.8660, 0.0000, -0.5000], [-0.7934, 0.0000, -0.6088], [-0.7071, 0.0000, -0.7071], [-0.6088, 0.0000, -0.7934], [-0.5000, 0.0000, -0.8660], [-0.3827, 0.0000, -0.9239], [-0.2588, 0.0000, -0.9659], [-0.1305, 0.0000, -0.9914], [0.0000, 0.0000, -1.0000], [0.0000, 0.0000, -1.1214], [0.0000, 0.0000, 0.0000], [0.0000, 0.0000, 1.1214], [0.0000, 0.0000, 0.0000], [1.1214, 0.0000, 0.0000], [0.0000, 0.0000, 0.0000], [-1.1214, 0.0000, 0.0000], [0.0000, 0.0000, 0.0000]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0,
                         54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0],
                     d=1,
                     n="circleCross_ctrl",
                     )
    return _ctrl


@undo
def ball2_shape():
    _ctrl = pm.curve(p=[[0.0000, -0.0000, 1.0000], [0.0000, -0.0000, 0.0000], [0.0000, 0.0000, -1.0000], [0.0000, -0.0000, 0.0000], [1.0000, -0.0000, 0.0000], [0.0000, -0.0000, 0.0000], [-1.0000, 0.0000, -0.0000], [-0.9914, 0.0000, -0.1305], [-0.9659, 0.0000, -0.2588], [-0.9239, 0.0000, -0.3827], [-0.8660, 0.0000, -0.5000], [-0.7934, 0.0000, -0.6088], [-0.7071, 0.0000, -0.7071], [-0.6088, 0.0000, -0.7934], [-0.5000, 0.0000, -0.8660], [-0.3827, 0.0000, -0.9239], [-0.2588, 0.0000, -0.9659], [-0.1305, 0.0000, -0.9914], [0.0000, 0.0000, -1.0000], [0.1305, 0.0000, -0.9914], [0.2588, 0.0000, -0.9659], [0.3827, 0.0000, -0.9239], [0.5000, 0.0000, -0.8660], [0.6088, 0.0000, -0.7934], [0.7071, 0.0000, -0.7071], [0.7934, 0.0000, -0.6088], [0.8660, 0.0000, -0.5000], [0.9239, 0.0000, -0.3827], [0.9659, 0.0000, -0.2588], [0.9914, 0.0000, -0.1305], [1.0000, 0.0000, -0.0000], [0.9914, -0.0000, 0.1305], [0.9659, -0.0000, 0.2588], [0.9239, -0.0000, 0.3827], [0.8660, -0.0000, 0.5000], [0.7934, -0.0000, 0.6088], [0.7071, -0.0000, 0.7071], [0.6088, -0.0000, 0.7934], [0.5000, -0.0000, 0.8660], [0.3827, -0.0000, 0.9239], [0.2588, -0.0000, 0.9659], [0.1305, -0.0000, 0.9914], [0.0000, -0.0000, 1.0000], [-0.1305, -0.0000, 0.9914], [-0.2588, -0.0000, 0.9659], [-0.3827, -0.0000, 0.9239], [-0.5000, -0.0000, 0.8660], [-0.6088, -0.0000, 0.7934], [-0.7071, -0.0000, 0.7071], [-0.7934, -0.0000, 0.6088], [-0.8660, -0.0000, 0.5000], [-0.9239, -0.0000, 0.3827], [-0.9659, -0.0000, 0.2588],
                        [-0.9914, -0.0000, 0.1305], [-1.0000, 0.0000, -0.0000], [-0.9914, 0.0000, -0.1305], [-1.0597, 0.0000, -0.1395], [-1.0324, 0.0000, -0.2766], [-0.9875, 0.0000, -0.4090], [-0.9256, 0.0000, -0.5344], [-0.8480, 0.0000, -0.6507], [-0.7558, 0.0000, -0.7558], [-0.6507, 0.0000, -0.8480], [-0.5344, 0.0000, -0.9256], [-0.4090, 0.0000, -0.9875], [-0.2766, 0.0000, -1.0324], [-0.1395, 0.0000, -1.0597], [-0.1305, 0.0000, -0.9914], [0.0000, 0.0000, -1.0000], [0.1305, 0.0000, -0.9914], [0.1395, 0.0000, -1.0597], [0.2766, 0.0000, -1.0324], [0.4090, 0.0000, -0.9875], [0.5344, 0.0000, -0.9256], [0.6507, 0.0000, -0.8480], [0.7558, 0.0000, -0.7558], [0.8480, 0.0000, -0.6507], [0.9256, 0.0000, -0.5344], [0.9875, 0.0000, -0.4090], [1.0324, 0.0000, -0.2766], [
                            1.0597, 0.0000, -0.1395], [0.9914, 0.0000, -0.1305], [1.0000, 0.0000, -0.0000], [0.9914, -0.0000, 0.1305], [1.0597, -0.0000, 0.1395], [1.0324, -0.0000, 0.2766], [0.9875, -0.0000, 0.4090], [0.9256, -0.0000, 0.5344], [0.8480, -0.0000, 0.6507], [0.7558, -0.0000, 0.7558], [0.6507, -0.0000, 0.8480], [0.5344, -0.0000, 0.9256], [0.4090, -0.0000, 0.9875], [0.2766, -0.0000, 1.0324], [0.1395, -0.0000, 1.0597], [0.1305, -0.0000, 0.9914], [0.0000, -0.0000, 1.0000], [-0.1305, -0.0000, 0.9914], [-0.1395, -0.0000, 1.0597], [-0.2766, -0.0000, 1.0324], [-0.4090, -0.0000, 0.9875], [-0.5344, -0.0000, 0.9256], [-0.6507, -0.0000, 0.8480], [-0.7558, -0.0000, 0.7558], [-0.8480, -0.0000, 0.6507], [-0.9256, -0.0000, 0.5344], [-0.9875, -0.0000, 0.4090],
                        [-1.0324, -0.0000, 0.2766], [-1.0597, -0.0000, 0.1395], [-0.9914, -0.0000, 0.1305], [-1.0000, 0.0000, -0.0000], [-0.9914, 0.0000, -0.1305], [-1.0000, 0.0000, -0.0000], [-0.9914, -0.0000, 0.1305], [-1.0597, -0.0000, 0.1395], [-1.0324, -0.0000, 0.2766], [-0.9875, -0.0000, 0.4090], [-0.9256, -0.0000, 0.5344], [-0.8480, -0.0000, 0.6507], [-0.7558, -0.0000, 0.7558], [-0.6507, -0.0000, 0.8480], [-0.5344, -0.0000, 0.9256], [-0.4090, -0.0000, 0.9875], [-0.2766, -0.0000, 1.0324], [-0.1395, -0.0000, 1.0597], [-0.1305, -0.0000, 0.9914], [0.0000, -0.0000, 1.0000], [0.1305, -0.0000, 0.9914], [0.1395, -0.0000, 1.0597], [0.2766, -0.0000, 1.0324], [0.4090, -0.0000, 0.9875], [0.5344, -0.0000, 0.9256], [0.6507, -0.0000, 0.8480], [0.7558, -0.0000,

                        [-0.7558, 0.0000, -0.7558], [-0.8480, 0.0000, -0.6507], [-0.9256, 0.0000, -0.5344], [-0.9875, 0.0000, -0.4090], [-1.0324, 0.0000, -0.2766], [-1.0597, 0.0000, -0.1395], [-0.9914, 0.0000, -0.1305], [-1.0000, 0.0000, -0.0000], [-0.9914, -0.0000, 0.1305], [-0.9659, -0.0000, 0.2588], [-0.9239, -0.0000, 0.3827], [-0.8660, -0.0000, 0.5000], [-0.7934, -0.0000, 0.6088], [-0.7071, -0.0000, 0.7071], [-0.6088, -0.0000, 0.7934], [-0.5000, -0.0000, 0.8660], [-0.3827, -0.0000, 0.9239], [-0.2588, -0.0000, 0.9659], [-0.1305, -0.0000, 0.9914], [0.0000, -0.0000, 1.0000], [0.1305, -0.0000, 0.9914], [0.2588, -0.0000, 0.9659], [0.3827, -0.0000, 0.9239], [0.5000, -0.0000, 0.8660], [0.6088, -0.0000, 0.7934], [0.7071, -0.0000, 0.7071], [0.7934, -0.0000,

                        [-0.9914, 0.0000, -0.1305], [-1.0000, 0.0000, -0.0000], [0.0000, -0.0000, 0.0000], [1.0000, -0.0000, 0.0000], [0.0000, -0.0000, 0.0000], [0.0000, 0.0000, -1.0000], [0.0000, -0.0000, 0.0000], [0.0000, -0.0000, 1.0000], [0.0000, -0.0000, 0.0000], [0.0000, 0.0000, -1.0000], [0.0000, -0.0000, 0.0000], [-0.0000, 1.0000, 0.0000], [0.0000, -0.0000, 0.0000], [0.0000, -1.0000, -0.0000], [0.0000, -0.9914, -0.1305], [0.0000, -0.9659, -0.2588], [0.0000, -0.9239, -0.3827], [0.0000, -0.8660, -0.5000], [0.0000, -0.7934, -0.6088], [0.0000, -0.7071, -0.7071], [0.0000, -0.6088, -0.7934], [0.0000, -0.5000, -0.8660], [0.0000, -0.3827, -0.9239], [0.0000, -0.2588, -0.9659], [0.0000, -0.1305, -0.9914], [-0.0000, 0.0000, -1.0000], [-0.0000, 0.1305, -

                        [0.0000, -0.6088, 0.7934], [0.0000, -0.7071, 0.7071], [0.0000, -0.7934, 0.6088], [0.0000, -0.8660, 0.5000], [0.0000, -0.9239, 0.3827], [0.0000, -0.9659, 0.2588], [0.0000, -0.9914, 0.1305], [0.0000, -1.0000, -0.0000], [0.0000, -0.9914, -0.1305], [0.0000, -1.0597, -0.1395], [0.0000, -1.0324, -0.2766], [0.0000, -0.9875, -0.4090], [0.0000, -0.9256, -0.5344], [0.0000, -0.8480, -0.6507], [0.0000, -0.7558, -0.7558], [0.0000, -0.6507, -0.8480], [0.0000, -0.5344, -0.9256], [0.0000, -0.4090, -0.9875], [0.0000, -0.2766, -1.0324], [0.0000, -0.1395, -1.0597], [0.0000, -0.1305, -0.9914], [-0.0000, 0.0000, -1.0000], [-0.0000, 0.1305, -0.9914], [-0.0000, 0.1395, -1.0597], [-0.0000, 0.2766, -1.0324], [-0.0000, 0.4090, -0.9875], [-0.0000, 0.5344, -

                        [0.0000, -0.5344, 0.9256], [0.0000, -0.6507, 0.8480], [0.0000, -0.7558, 0.7558], [0.0000, -0.8480, 0.6507], [0.0000, -0.9256, 0.5344], [0.0000, -0.9875, 0.4090], [0.0000, -1.0324, 0.2766], [0.0000, -1.0597, 0.1395], [0.0000, -0.9914, 0.1305], [0.0000, -1.0000, -0.0000], [0.0000, -0.0000, 0.0000], [-0.0000, 1.0000, -0.0000], [0.0000, -0.0000, 0.0000], [-1.0000, -0.0000, 0.0000], [0.0000, -0.0000, 0.0000], [1.0000, 0.0000, -0.0000], [0.9914, 0.1305, -0.0000], [0.9659, 0.2588, -0.0000], [0.9239, 0.3827, -0.0000], [0.8660, 0.5000, -0.0000], [0.7934, 0.6088, -0.0000], [0.7071, 0.7071, -0.0000], [0.6088, 0.7934, -0.0000], [0.5000, 0.8660, -0.0000], [0.3827, 0.9239, -0.0000], [0.2588, 0.9659, -0.0000], [0.1305, 0.9914, -0.0000], [-0.0000, 1.0000, -

                        [0.5000, -0.8660, -0.0000], [0.6088, -0.7934, -0.0000], [0.7071, -0.7071, -0.0000], [0.7934, -0.6088, -0.0000], [0.8660, -0.5000, -0.0000], [0.9239, -0.3827, -0.0000], [0.9659, -0.2588, -0.0000], [0.9914, -0.1305, -0.0000], [1.0000, 0.0000, -0.0000], [0.9914, 0.1305, -0.0000], [1.0597, 0.1395, -0.0000], [1.0324, 0.2766, -0.0000], [0.9875, 0.4090, -0.0000], [0.9256, 0.5344, -0.0000], [0.8480, 0.6507, -0.0000], [0.7558, 0.7558, -0.0000], [0.6507, 0.8480, -0.0000], [0.5344, 0.9256, -0.0000], [0.4090, 0.9875, -0.0000], [0.2766, 1.0324, -0.0000], [0.1395, 1.0597, -0.0000], [0.1305, 0.9914, -0.0000], [-0.0000, 1.0000, -0.0000], [-0.1305, 0.9914, -0.0000], [-0.1395, 1.0597, -0.0000], [-0.2766, 1.0324, 0.0000], [-0.4090, 0.9875, 0.0000], [-0.5344, 0.9256,

                        [0.5344, -0.9256, -0.0000], [0.6507, -0.8480, -0.0000], [0.7558, -0.7558, -0.0000], [0.8480, -0.6507, -0.0000], [0.9256, -0.5344, -0.0000], [0.9875, -0.4090, -0.0000], [1.0324, -0.2766, -0.0000], [1.0597, -0.1395, -0.0000], [0.9914, -0.1305, -0.0000], [1.0000, 0.0000, -0.0000], [0.9914, 0.1305, -0.0000]],

                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0,
                        232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0, 279.0, 280.0, 281.0, 282.0, 283.0, 284.0, 285.0, 286.0, 287.0, 288.0, 289.0, 290.0, 291.0, 292.0, 293.0, 294.0, 295.0, 296.0, 297.0, 298.0, 299.0, 300.0, 301.0, 302.0, 303.0, 304.0, 305.0, 306.0, 307.0, 308.0, 309.0, 310.0, 311.0, 312.0, 313.0, 314.0, 315.0, 316.0, 317.0, 318.0, 319.0, 320.0, 321.0, 322.0, 323.0, 324.0, 325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 332.0, 334.0, 335.0, 336.0, 337.0, 338.0, 339.0, 340.0, 341.0, 342.0, 343.0, 344.0, 345.0, 346.0, 347.0, 348.0, 349.0, 350.0, 351.0, 352.0, 353.0, 354.0, 355.0, 356.0, 357.0, 358.0, 359.0, 360.0, 361.0, 362.0, 363.0, 364.0, 365.0, 366.0, 367.0, 368.0, 369.0, 370.0, 371.0, 372.0, 373.0, 374.0, 375.0, 376.0, 377.0, 378.0, 379.0, 380.0, 381.0, 382.0, 383.0, 384.0, 385.0, 386.0, 387.0, 388.0, 389.0, 390.0, 391.0, 392.0, 393.0, 394.0, 395.0, 396.0, 397.0, 398.0, 399.0, 400.0, 401.0, 402.0, 403.0, 404.0, 405.0, 406.0, 407.0, 408.0, 409.0, 410.0, 411.0, 412.0, 413.0, 414.0, 415.0, 416.0, 417.0, 418.0, 419.0, 420.0, 421.0, 422.0, 423.0, 424.0, 425.0, 426.0, 427.0, 428.0, 429.0, 430.0, 431.0, 432.0, 433.0, 434.0, 435.0, 436.0, 437.0, 438.0, 439.0, 440.0, 441.0, 442.0, 443.0, 444.0],
                     d=1,
                     n="ball_ctrl")
    return _ctrl


@undo
def square_shape():
    _ctrl = pm.curve(p=[(0.55, 0.02, 0.55), (0.55, 0.02, -0.55), (-0.55, 0.02, -0.55), (-0.55, 0.012, 0.55), (0.55, 0.02, 0.55)],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0],
                     d=1,
                     n="square_ctrl",
                     )
    return _ctrl


@undo
def square_prop_shape():

    selection = pm.selected()

    @changeColor()
    def square_prop(sub):

        pm.select(sub)
        if pm.objectType(sub) == 'joint':
            square = pm.curve(p=[(0.55, 0.02, 0.55), (0.55, 0.02, -0.55), (-0.55, 0.02, -0.55), (-0.55, 0.012, 0.55), (0.55, 0.02, 0.55)], k=[0.0, 1.0, 2.0, 3.0, 4.0], d=1, n="square_ctrl")
            pm.matchTransform(square, sub)
            return square

        else:
            Bbox = sub.getBoundingBox()

            minZ = [Bbox.max()[0], Bbox.center()[1], Bbox.min()[2]]
            maxZ = [Bbox.max()[0], Bbox.center()[1], Bbox.max()[2]]

            minX = [Bbox.min()[0], Bbox.center()[1], Bbox.max()[2]]
            maxX = [Bbox.min()[0], Bbox.center()[1], Bbox.min()[2]]

            def mminiLoc(pos):
                miniloc = pm.spaceLocator(position=pos, n='{}_miniLoc'.format(oGeo))
                miniloc.overrideEnabled.set(1)
                miniloc.overrideRGBColors.set(1)
                miniloc.overrideColorRGB.set(1, 0, 0)

                miniloc.localScaleX.set(0.2)
                miniloc.localScaleY.set(0.2)
                miniloc.localScaleZ.set(0.2)

            # mminiLoc(minZ)
            # mminiLoc(maxZ)
            # mminiLoc(minX)
            # mminiLoc(maxX)

            if (minZ[0] - maxX[0]) > (minX[2] - maxX[2]):

                newScale = (minZ[0] - maxX[0])
            else:
                newScale = (minX[2] - maxX[2])
            # print(newScale)

            _ctrl = pm.curve(p=[(minZ), (maxZ), (minX), (maxX), (minZ)], k=[0.0, 1.0, 2.0, 3.0, 4.0], d=1, n="square_ctrl")
            pm.xform(_ctrl, cp=1)
            return _ctrl

    if pm.selected():

        for sel in selection:
            _ctrl = square_prop(sel)

    else:
        @changeColor()
        def singleSquare():
            _ctrl = pm.curve(p=[(0.55, 0.02, 0.55), (0.55, 0.02, -0.55), (-0.55, 0.02, -0.55), (-0.55, 0.012, 0.55), (0.55, 0.02, 0.55)],
                             k=[0.0, 1.0, 2.0, 3.0, 4.0],
                             d=1,
                             n="square_ctrl"
                             )
            return _ctrl
        singleSquare()

    return _ctrl


@undo
def cog_shape():
    _ctrl = pm.curve(p=[[0.56, 0.00, -0.01], [0.71, -0.00, 0.05], [0.71, -0.00, 0.08], [0.71, -0.00, 0.12], [0.70, -0.00, 0.15], [0.69, -0.00, 0.18], [0.67, -0.00, 0.21], [0.52, -0.00, 0.21], [0.50, -0.00, 0.25], [0.48, -0.00, 0.29], [0.45, -0.00, 0.32], [0.43, -0.00, 0.36], [0.40, -0.00, 0.39], [0.47, -0.00, 0.53], [0.44, -0.00, 0.56], [0.42, -0.00, 0.58], [0.39, -0.00, 0.60], [0.36, -0.00, 0.62], [0.33, -0.00, 0.63], [0.22, -0.00, 0.51], [0.18, -0.00, 0.53], [0.14, -0.00, 0.54], [0.09, -0.00, 0.55], [0.05, -0.00, 0.55], [0.01, -0.00, 0.56], [-0.05, -0.00, 0.71], [-0.08, -0.00, 0.71], [-0.12, -0.00, 0.71], [-0.15, -0.00, 0.70], [-0.18, -0.00, 0.69], [-0.21, -0.00, 0.67], [-0.21, -0.00, 0.52], [-0.25, -0.00, 0.50], [-0.29, -0.00, 0.48], [-0.32, -0.00, 0.45], [-0.36, -0.00, 0.43], [-0.39, -0.00, 0.40], [-0.53, -0.00, 0.47], [-0.56, -0.00, 0.44], [-0.58, -0.00, 0.42], [-0.60, -0.00, 0.39], [-0.62, -0.00, 0.36], [-0.63, -0.00, 0.33], [-0.51, -0.00, 0.22], [-0.53, -0.00, 0.18], [-0.54, -0.00, 0.14], [-0.55, -0.00, 0.09], [-0.55, -0.00, 0.05], [-0.56, -0.00, 0.01], [-0.71, 0.00, -0.05], [-0.71, 0.00, -0.08], [-0.71, 0.00, -0.12], [-0.70, 0.00, -0.15],
                        [-0.69, 0.00, -0.18], [-0.67, 0.00, -0.21], [-0.52, 0.00, -0.21], [-0.50, 0.00, -0.25], [-0.48, 0.00, -0.29], [-0.45, 0.00, -0.32], [-0.43, 0.00, -0.36], [-0.40, 0.00, -0.39], [-0.47, 0.00, -0.53], [-0.44, 0.00, -0.56], [-0.42, 0.00, -0.58], [-0.39, 0.00, -0.60], [-0.36, 0.00, -0.62], [-0.36, 0.00, -0.62], [-0.33, 0.00, -0.63], [-0.22, 0.00, -0.51], [-0.18, 0.00, -0.53], [-0.14, 0.00, -0.54], [-0.09, 0.00, -0.55], [-0.05, 0.00, -0.55], [-0.01, 0.00, -0.56], [0.05, 0.00, -0.71], [0.08, 0.00, -0.71], [0.12, 0.00, -0.71], [0.15, 0.00, -0.70], [0.18, 0.00, -0.69], [0.21,

                        [0.18, -0.00, 0.15], [0.17, -0.00, 0.16], [0.15, -0.00, 0.17], [0.14, -0.00, 0.19], [0.12, -0.00, 0.20], [0.11, -0.00, 0.21], [0.09, -0.00, 0.21], [0.07, -0.00, 0.22], [0.06, -0.00, 0.22], [0.04, -0.00, 0.23], [0.02, -0.00, 0.23], [0.00, -0.00, 0.23], [-0.02, -0.00, 0.23], [-0.03, -0.00, 0.23], [-0.05, -0.00, 0.23], [-0.07, -0.00, 0.22], [-0.09, -0.00, 0.21], [-0.10, -0.00, 0.21], [-0.12, -0.00, 0.20], [-0.13, -0.00, 0.19], [-0.15, -0.00, 0.18], [-0.16, -0.00, 0.17], [-0.17, -0.00, 0.15], [-0.19, -0.00, 0.14], [-0.20, -0.00, 0.12], [-0.21, -0.00, 0.11], [-0.21, -0.00,

                        [0.03, 0.00, -0.23], [0.05, 0.00, -0.23], [0.07, 0.00, -0.22], [0.09, 0.00, -0.21], [0.10, 0.00, -0.21], [0.12, 0.00, -0.20], [0.13, 0.00, -0.19], [0.15, 0.00, -0.18], [0.16, 0.00, -0.17], [0.17, 0.00, -0.15], [0.19, 0.00, -0.14], [0.20, 0.00, -0.12], [0.21, 0.00, -0.11], [0.21, 0.00, -0.09], [0.22, 0.00, -0.07], [0.22, 0.00, -0.06], [0.23, 0.00, -0.04], [0.23, 0.00, -0.02], [0.23, 0.00, -0.00]],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0,
                        97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0],
                     d=1,
                     n="cog_ctrl",
                     )
    return _ctrl


@undo
def locator_shape():
    _ctrl = pm.curve(p=[(0.0, 1.003967, 0.0), (0.0, 0.0, 0.0), (0.0, -1.003967, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 1.003967), (0.0, 0.0, 0.0), (0.0, 0.0, -1.003967), (0.0, 0.0, 0.0), (1.003967, 0.0, 0.0), (0.0, 0.0, 0.0), (-1.003967, 0.0, 0.0), (0.0, 0.0, 0.0)],
                     k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0],
                     d=1,
                     n="locator_shape",
                     )
    return _ctrl


@undo
def ik_shape(scale=0.054):

    def CombineShape():
        oNurbs = pm.selected()
        oDriver = oNurbs[0]
        oDriven = oNurbs[1:]

        shapes = [x.getShapes() for x in oDriven]
        transforms = [x.getTransform() for x in oDriven]

        pm.select(None)
        pm.select(shapes)
        pm.select(oDriver, add=True)

        pm.parent(r=True, s=True)
        pm.delete(transforms)
        return oDriver

    i_shape = pm.curve(p=[[1.6518, 0.0000, 0.0000], [3.3206, 0.0000, 0.0000], [3.3206, 12.3149, 0.0000], [1.6518, 12.3149, 0.0000], [1.6518, 0.0000, 0.0000]],
                       d=1,
                       k=[0.0, 1.0, 2.0, 3.0, 4.0]
                       )
    k_shape = pm.curve(p=[[14.6245, 0.0000, 0.0000], [16.6951, 0.0000, 0.0000], [10.7524, 6.9656, 0.0000], [15.9966, 12.3149, 0.0000], [14.0297, 12.3149, 0.0000], [8.0961, 6.1436, 0.0000], [8.0961, 12.3149, 0.0000], [6.4259, 12.3149, 0.0000], [6.4259, 0.0000, 0.0000], [8.0961, 0.0000, 0.0000], [8.0961, 4.7190, 0.0000], [9.7033, 5.9428, 0.0000], [14.6245, 0.0000, 0.0000]],
                       d=1,
                       k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])

    pm.select(i_shape)
    pm.select(k_shape, add=1)
    new_shape = CombineShape()
    pm.rename(new_shape, 'ik_shape')

    new_shape.scaleX.set(scale)
    new_shape.scaleY.set(scale)
    new_shape.scaleZ.set(scale)
    pm.select(new_shape)
    mc.FreezeTransformations()
    return new_shape


@undo
def fk_shape(scale=0.054):
    def CombineShape():
        oNurbs = pm.selected()
        oDriver = oNurbs[0]
        oDriven = oNurbs[1:]

        shapes = [x.getShapes() for x in oDriven]
        transforms = [x.getTransform() for x in oDriven]

        pm.select(None)
        pm.select(shapes)
        pm.select(oDriver, add=True)

        pm.parent(r=True, s=True)
        pm.delete(transforms)
        return oDriver

    f_shape = pm.curve(p=[[0.1808, 0.5913, 0.0000], [0.5630, 0.5913, 0.0000], [0.5630, 0.6650, 0.0000], [0.0906, 0.6650, 0.0000], [0.0906, 0.0000, 0.0000], [0.1808, 0.0000, 0.0000], [0.1808, 0.2695, 0.0000],
                          [0.5517, 0.2695, 0.0000], [0.5517, 0.3440, 0.0000], [0.1808, 0.3440, 0.0000], [0.1808, 0.5913, 0.0000]], d=1, k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])

    k_shape = pm.curve(p=[[1.1233, 0.0000, 0.0000], [1.2351, 0.0000, 0.0000], [0.9142, 0.3761, 0.0000], [1.1973, 0.6650, 0.0000], [1.0911, 0.6650, 0.0000], [0.7707, 0.3318, 0.0000], [0.7707, 0.6650, 0.0000], [0.6805, 0.6650, 0.0000], [
                       0.6805, 0.0000, 0.0000], [0.7707, 0.0000, 0.0000], [0.7707, 0.2548, 0.0000], [0.8575, 0.3209, 0.0000], [1.1233, 0.0000, 0.0000]], d=1, k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])

    pm.select(f_shape)
    pm.select(k_shape, add=1)
    new_shape = CombineShape()
    pm.rename(new_shape, 'fk_shape')

    pm.select(new_shape)
    mc.FreezeTransformations()
    return new_shape

# FIXME: IK - FK Shape Overlapping
@undo
def ik_fk_shape():
    def CombineShape(driver, driven):
        shapes = driver.getShapes()
        pm.select(shapes[0], r=1)
        transforms = driven.getTransform()
        pm.parent(shapes, transforms, r=1, s=True)
        pm.delete(driver)
        return  transforms

    fk = fk_shape()
    ik = ik_shape()

    new_shape = CombineShape(ik, fk)
    pm.rename(new_shape, 'ik_fk__ctrl__')
    new_shape.translateX.set(1)
    pm.select(new_shape)
    mc.FreezeTransformations()

    return new_shape



@undo
def cylinder_shape():
    _ctrl = pm.curve(p=[[-1.0000, 0.1613, 0.0000], [1.0000, 0.1613, 0.0000], [1.0000, 0.1305, 0.0948], [-1.0000, 0.1305, 0.0948], [-1.0000, 0.1613, 0.0000], [-1.0000, 0.1305, 0.0948], [-1.0000, 0.0498, 0.1534], [1.0000, 0.0498, 0.1534],        
                        [1.0000, 0.1305, 0.0948], [1.0000, 0.0498, 0.1534], [1.0000, -0.0498, 0.1534], [-1.0000, -0.0498, 0.1534], [-1.0000, 0.0498, 0.1534], [-1.0000, -0.0498, 0.1534], [-1.0000, -0.1305, 0.0948], [1.0000, -0.1305, 0.0948],    
                        [1.0000, -0.0498, 0.1534],[1.0000, -0.1305, 0.0948], [1.0000, -0.1613, 0.0000], [-1.0000, -0.1613, 0.0000], [-1.0000, -0.1305, 0.0948], [-1.0000, -0.1613, 0.0000], [-1.0000, -0.1305, -0.0948], [1.0000, -0.1305,  
                        -0.0948], [1.0000, -0.1613, 0.0000], [1.0000, -0.1305, -0.0948], [1.0000, -0.0498, -0.1534], [-1.0000, -0.0498, -0.1534], [-1.0000, -0.1305, -0.0948], [-1.0000, -0.0498, -0.1534], [-1.0000, 0.0498, -0.1534], [1.0000, 
                        0.0498, -0.1534], [1.0000, -0.0498, -0.1534], [1.0000, 0.0498, -0.1534], [1.0000, 0.1305, -0.0948], [-1.0000, 0.1305, -0.0948], [-1.0000, 0.0498, -0.1534], [-1.0000, 0.1305, -0.0948], [-1.0000, 0.1613, 0.0000], 
                        [1.0000, 0.1613, 0.0000], [1.0000, 0.1305, -0.0948]],
                    k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0,
                        21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0],
                    d=1,
                    n="cylinder_ctrl")
    return _ctrl


@undo
def foot_shape():
    _ctrl = pm.curve(p=[[0.5035, 0.0000, -0.3427], [-0.0000, 0.0000, -0.5948], [-0.5194, 0.0000, -0.3427], [-0.5194, 0.0000, -0.0000], [-0.5194, -0.0000, 1.0460], [-0.0000, -0.0000, 1.0167], [0.5035, -0.0000, 1.0460],
                        [0.5035, -0.0000, 0.0000], [0.5035, 0.0000, -0.3427], [-0.0000, 0.0000, -0.5948], [-0.5194, 0.0000, -0.3427]], k=[-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0], d=3, n="foot_ctrl")
    return _ctrl


"""
=========================== Controls building ===========================

"""


@undo
def makeCtrls(shape_name):
    """
    Controller builder
    A selection is needed
    Creates a controller according to the shape. Match the rotation, position, and name of the selection

    :param: shape_name : the name of the function creating the shape
    :type shape_name : function
    """

    Ctrls = []
    sel = pm.selected()

    def NumCtrls(shape):
        pm.select(shape, add=True)

        ctrl = pm.selected()
        Ctrls.append(ctrl)
        num = len(sel)

        for each in range(0, num):
            addCtrl = pm.duplicate(ctrl)
            pm.select(addCtrl, r=True)
            Ctrls.append(addCtrl)

        for oSel, oCtrls in zip(sel, Ctrls):
            # print (oSel, oCtrls)
            pm.matchTransform(oCtrls, oSel,  rot=True, pos=True)
            pm.rename(oCtrls, '{}__{}'.format(oSel, NC.CTRL))

    NumCtrls(shape_name())
    pm.select(Ctrls)
    pm.delete(Ctrls[-1])
    Ctrls.remove(Ctrls[-1])
    return Ctrls
